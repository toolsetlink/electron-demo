name: 'publish'

on:
  push:
    branches:
      - main
    tags:  # 增加标签推送触发
      - 'v*.*.*'  # 匹配语义化版本标签，如v1.0.0

jobs:
  publish-electron:
    outputs:
      appVersion: ${{ steps.extract-version.outputs.appVersion }}

    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - platform: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: true

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: |
            ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
            ${{ matrix.platform == 'windows-latest' && matrix.target == 'aarch64-pc-windows-msvc' && 'aarch64-pc-windows-msvc' || '' }}

      - name: install dependencies (ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf xdg-utils

      - name: install frontend dependencies
        run: pnpm install

      - name: Build Electron App
        run: pnpm run dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      # 删除无用文件
#      - name: Cleanup Artifacts for Windows
#        if: matrix.platform == 'windows-latest'
#        run: |
#          npx rimraf "dist/!(*.exe)"
#
#      - name: Cleanup Artifacts for MacOS
#        if: matrix.platform == 'macos-latest'
#        run: |
#          npx rimraf "dist/!(*.dmg)"

      - name: Cleanup Artifacts for Linux
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          npx rimraf "dist/!(*.AppImage)"

      # 提取版本号（从package.json或标签中）
      - name: Extract version
        id: extract-version
        run: |
          # 从标签提取版本号，如果存在标签
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${{ github.ref_name }}
          else
            # 否则从package.json提取
            VERSION=$(node -p "require('./package.json').version")
          fi
          echo "appVersion=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: upload artifacts
        uses: actions/upload-artifact@v4.0.0
        with:
          name: ${{ matrix.platform }}
          path: dist

      # 发布到Releases
      - name: release
        uses: softprops/action-gh-release@v0.1.14
        with:
          tag_name: ${{ steps.extract-version.outputs.appVersion }}  # 使用提取的版本号作为标签
          name: Release ${{ steps.extract-version.outputs.appVersion }}  # 发布名称
          files: "dist/**"  # 上传dist目录下的所有文件
          draft: false  # 不设为草稿
          prerelease: false  # 不是预发布
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # 确保只在一个矩阵任务中执行发布，避免重复发布
        if: matrix.platform == 'ubuntu-22.04'
