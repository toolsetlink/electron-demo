name: 'publish'

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

jobs:
  publish-electron:
    outputs:
      appVersion: ${{ steps.extract-version.outputs.appVersion }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            artifact-name: ubuntu-x86_64
          - platform: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            artifact-name: ubuntu-aarch64

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: true

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: |
            ${{ startsWith(matrix.platform, 'ubuntu') && matrix.target || '' }}
            ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
            ${{ matrix.platform == 'windows-latest' && matrix.target == 'aarch64-pc-windows-msvc' && 'aarch64-pc-windows-msvc' || '' }}

      - name: install dependencies (ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf xdg-utils

      - name: install frontend dependencies
        run: pnpm install

      - name: Install rimraf
        run: pnpm add rimraf -D

      - name: Build Electron App
        run: pnpm run dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup Artifacts for Linux (精确清理)
        if: startsWith(matrix.platform, 'ubuntu')
        run: |
          # 创建临时目录
          mkdir -p dist-temp
          
          # 只保留需要的文件类型
          find dist -maxdepth 1 -type f \( -name "*.AppImage" -o -name "*.yml" -o -name "*.zip" \) -exec cp {} dist-temp/ \;
          
          # 替换原dist目录
          rm -rf dist
          mv dist-temp dist
          
          # 显示保留的文件（用于调试）
          echo "保留的发布文件："
          ls -la dist

      - name: Rename files with architecture suffix
        if: startsWith(matrix.platform, 'ubuntu')
        run: |
          cd dist
          
          # 确保架构后缀正确
          ARCH_SUFFIX="${{ matrix.arch-suffix }}"
          if [ "$ARCH_SUFFIX" != "x64" ] && [ "$ARCH_SUFFIX" != "arm64" ]; then
            echo "错误: 架构后缀不正确 - $ARCH_SUFFIX"
            exit 1
          fi
          
          # 重命名文件
          for file in *; do
            if [ -f "$file" ]; then
              # 处理文件名，避免双重后缀
              if [[ "$file" == *-"$ARCH_SUFFIX".* ]]; then
                echo "文件已包含架构后缀: $file"
              else
                filename="${file%.*}"
                extension="${file#$filename}"
                new_filename="${filename}-${ARCH_SUFFIX}${extension}"
                mv "$file" "$new_filename"
                echo "重命名: $file -> $new_filename"
              fi
            fi
          done
          
          # 显示重命名后的文件
          echo "重命名后的文件:"
          ls -l

      - name: Extract version
        id: extract-version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${{ github.ref_name }}
          else
            VERSION=$(node -p "require('./package.json').version")
          fi
          echo "appVersion=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.0.0
        with:
          name: ${{ matrix.artifact-name }}
          path: dist/*
          if-no-files-found: error  # 如果没有文件则报错

  release:
    needs: publish-electron
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: false  # 保持每个artifact的独立目录

      - name: Verify artifact files
        run: |
          echo "下载的文件结构:"
          tree artifacts
          
          # 检查是否有文件
          if [ -z "$(find artifacts -type f)" ]; then
            echo "错误: 没有找到任何artifact文件"
            exit 1
          fi

      - name: Prepare release files
        run: |
          mkdir -p release-files
          
          # 复制所有文件到发布目录
          find artifacts -type f -exec cp {} release-files/ \;
          
          # 显示要发布的文件
          echo "准备发布的文件:"
          ls -l release-files

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.publish-electron.outputs.appVersion }}
          name: Release ${{ needs.publish-electron.outputs.appVersion }}
          files: release-files/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
