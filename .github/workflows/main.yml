name: 'publish'

on:
  push:
    branches:
      - main

jobs:
  publish-electron:
    # 添加输出定义
    outputs:
      appVersion: ${{ steps.set_output.outputs.appVersion }}

    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            target: aarch64-apple-darwin
          - platform: macos-latest
            target: x86_64-apple-darwin

          - platform: windows-latest
            target: x86_64-pc-windows-msvc
          - platform: windows-latest
            target: i686-pc-windows-msvc
          - platform: windows-latest
            target: aarch64-pc-windows-msvc

          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - platform: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: true

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: |
            ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
            ${{ matrix.platform == 'windows-latest' && matrix.target == 'aarch64-pc-windows-msvc' && 'aarch64-pc-windows-msvc' || '' }}


      - name: install dependencies (ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu')  # 修改条件，覆盖所有 Ubuntu 版本
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf xdg-utils

      - name: install frontend dependencies
        run: pnpm install

      - name: Build Electron App
        run: pnpm run dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release tag
        id: save_tag
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          # 调试输出
          echo ${{ steps.tauri-action.outputs.appVersion }}
          # 输出到步骤级
          echo "appVersion=${{ steps.tauri-action.outputs.appVersion }}" >> $GITHUB_OUTPUT

      # 设置作业级输出
      - name: Set job output
        id: set_output
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          # 注意：这里引用的是 save_tag 步骤的 tag_name 输出
          echo "appVersion=${{ steps.save_tag.outputs.appVersion }}" >> $GITHUB_OUTPUT

      - name: upload artifacts
        uses: actions/upload-artifact@v4.0.0
        with:
          name: ${{ matrix.platform }}
          path: dist

      - name: release
        uses: softprops/action-gh-release@v0.1.14
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: "dist/**"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

